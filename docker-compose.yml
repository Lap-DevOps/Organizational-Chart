version: '3.0'

services:
  flask-restplus-app:
    container_name: backend
    build:
      context: ./api
      dockerfile: Dockerfile
    expose:
      - "8000"
    depends_on:
      - postgres
    networks:
      - app-network
    environment:
      ENVIRONMENT: ${ENVIRONMENT}
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail http://localhost:8000/health || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 5

  postgres:
    image: postgres:16-alpine
    container_name: postgres-db-master
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
#      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=md5"
      POSTGRESQL_PGAUDIT_LOG: READ,WRITE
      POSTGRESQL_LOG_HOSTNAME: 'true'
    expose:
      - "5432"
    networks:
      - app-network
    volumes:
      - ./db/data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432"

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    expose:
      - "6379"
    networks:
      - app-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 10s
      retries: 3

  nginx-proxy:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: nginx-proxy
    restart: always
    ports:
      - "80:80"
    depends_on:
      - flask-restplus-app
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "curl --silent --fail http://localhost:80/health > /dev/null || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5

networks:
  app-network:
    driver: bridge




#  # Компонент React
#  react-app:
#    build:
#      context: ./react-app  # Директория с файлами Docker для React
#    ports:
#      - "3000:3000"  # Прокидываем порт React
#    depends_on:
#      - api  # Ожидаем, пока контейнер с API запустится
#    networks:
#      - app_network


