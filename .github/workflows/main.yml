name: Run Tests

on:
  pull_request:
    branches:
      - '*'


jobs:
  my-custom-test:
    runs-on: ubuntu-latest

    env:
      ENVIRONMENT: "testing"
      POSTGRES_DB: test_database
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_user_password

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements-dev.txt

      - name: Create data directory
        run: mkdir -p ./db/data
        working-directory: ${{ github.workspace }}

      - name: Set permissions for data directory
        run: sudo chmod -R 777 ./db/data
        working-directory: ${{ github.workspace }}

      - name: Build and run Docker containers
        run: |
          docker-compose up --build -d
          docker ps

      - name: Wait for PostgreSQL to start
        run: sleep 30

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/api" >> $GITHUB_ENV

      - name: Show current working directory
        run: |
          echo "Current working directory: $(pwd)"
      - name: Show contents of current working directory
        run: ls -la

      - name: Run tests
        run: |
          sudo chmod -R 777 ./db/data
          pytest -vv -s 
          test_status=$?
          if [ $test_status -eq 0 ]; then
            echo "Tests passed!"
            echo "status=success" >> $GITHUB_ENV
            echo "::set-output name=status::success"
          else
            echo "Tests failed!"
            echo "status=failure" >> $GITHUB_ENV
          exit 1
          fi
        working-directory: ${{ github.workspace }}


      - name: Stop Docker containers
        run: |
          docker-compose down

      - name: Save state
        run:
          echo "STATE=success" >> $GITHUB_ENV

      - name: Set output
        run:
          echo "::set-output name=status::success"

